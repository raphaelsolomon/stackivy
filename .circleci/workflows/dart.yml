# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.

# name: Dart

# on:
#   push:
#     branches: [ "main" ]

# jobs:
#   build:
#     runs-on: macos-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - uses: actions/setup-java@v2
#         with:
#           distribution: 'zulu'
#           java-version: '11'

#       # Install the Apple certificate and provisioning profile 
#       - name: Install the Apple certificate and provisioning profile
#         env:
#           BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
#           P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
#           BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
#           KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

#         run: |
#           # create variables
#           CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#           PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#           KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#           # import certificate and provisioning profile from secrets
#           echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#           echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
#           # create temporary keychain
#           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           # import certificate to keychain
#           security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH
#           # apply provisioning profile
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

#       - uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.16.1'
#           channel: 'stable'

#       - name: Flutter Doctor
#         run: flutter doctor    

#       - name: Install dependencies
#         run: flutter pub get

#       - name: Compile for android
#         run: flutter build apk --debug --split-per-abi
      
#       # Build and sign the ipa using a single flutter command
#       - name: Building IPA
#         run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist
          
#       # Collect the file and upload as artifact         
#       - name: collect ipa artifacts
#         uses: actions/upload-artifact@v2
#         with:
#          name: release-ipa
#          # Path to the release files
#          path: build/ios/ipa/*.ipa

#       # Important! Cleanup: remove the certificate and provisioning profile from the runner!
#       - name: Clean up keychain and provisioning profile
#         if: ${{ always() }}
#         run: |
#           security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
#           rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

#       - name: Push APK to Releases
#         uses: ncipollo/release-action@v1
#         with:
#           artifacts: "build/app/outputs/apk/debug/*.apk"
#           tag: v0.0.0
#           replacesArtifacts: false
#           allowUpdates: true
#           token: "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"




